
struct VertexDataInput {
	float4 vertex: POSITION;
	float3 normal: NORMAL;
	float3 color: COLOR;
};

struct VertexDataOutput {
	float4 projv  : POSITION;
	float4 color : COLOR;
	float3 vertex: TEXCOORD0;
	float3 normal: TEXCOORD1;
};

struct PixelDataOutput {
	float4 color : COLOR0;
};

VertexDataOutput VertexMain(VertexDataInput vdi, 
  uniform float4x4 modelViewProj, uniform float df) {

  VertexDataOutput ret;
  float4 dvertex = vdi.vertex;
//  dvertex.xyz = vdi.vertex + vdi.normal*df;
  dvertex.w = 1.0f;

//  ret.projv = mul(modelViewProj, dvertex);
  ret.color = float4(vdi.color, 1.0f);
  ret.vertex = dvertex.xyz;
  ret.normal = vdi.normal;

  return ret;

}

TRIANGLE void GeometryMain(AttribArray<VertexDataOutput> tverts,
	uniform float4x4 modelViewProj, uniform float ef) {

	float4 v0;
	v0.xyz = tverts[0].vertex;
	v0.w = 1.0f;
	float4 v1;
	v1.xyz = tverts[1].vertex;
	v1.w = 1.0f;
	float4 v2;
	v2.xyz = tverts[2].vertex;
	v2.w = 1.0f;

	VertexDataOutput ov0, ov1, ov2;
	ov0 = tverts[0];
	ov1 = tverts[1];
	ov2 = tverts[2];

	float3 triNormal = normalize(cross((v1-v0).xyz, (v2-v0).xyz));
	v0.xyz = v0.xyz + triNormal*ef;
	v1.xyz = v1.xyz + triNormal*ef;
	v2.xyz = v2.xyz + triNormal*ef;

	ov0.projv = mul(modelViewProj, v0);
	ov1.projv = mul(modelViewProj, v1);
	ov2.projv = mul(modelViewProj, v2);

	emitVertex(ov0);
	emitVertex(ov1);
	emitVertex(ov2);
	return;

}



TRIANGLE void GeometryMainShrinkingTriangles(AttribArray<VertexDataOutput> tverts,
	uniform float4x4 modelViewProj) {

	float4 v0;
	v0.xyz = tverts[0].vertex;
	v0.w = 1.0f;
	float4 v1;
	v1.xyz = tverts[1].vertex;
	v1.w = 1.0f;
	float4 v2;
	v2.xyz = tverts[2].vertex;
	v2.w = 1.0f;

	VertexDataOutput ov0, ov1, ov2;
	ov0 = tverts[0];
	ov1 = tverts[1];
	ov2 = tverts[2];

	float4 center;
	center = (v0+v1+v2)/3.0f;
	float sf = 0.5;
	v0 = v0 + (center - v0)*sf;
	v1 = v1 + (center - v1)*sf;
	v2 = v2 + (center - v2)*sf;

	ov0.projv = mul(modelViewProj, v0);
	ov1.projv = mul(modelViewProj, v1);
	ov2.projv = mul(modelViewProj, v2);

	emitVertex(ov0);
	emitVertex(ov1);
	emitVertex(ov2);
	return;

}

PixelDataOutput FragmentMain(VertexDataOutput pdi, 
	uniform float blueHue, uniform float3 eye,
	uniform float3 teapotCenter) {

  PixelDataOutput ret;
  ret.color = pdi.color;
  
  return ret;

  float3 eyeRay = eye - pdi.vertex;
  eyeRay = normalize(eyeRay);

  float3 normal = normalize(pdi.normal);
  float3 rn = normal*dot(eyeRay, normal);
  float3 rr = rn*2.0f - eyeRay;
  rr = (rr + float3(1.0, 1.0, 1.0))/2.0;
  ret.color.rgb = rr;

  return ret;

  eyeRay = (eyeRay + float3(1.0, 1.0, 1.0))/2.0;
  ret.color.rgb = eyeRay;

  normal = (normal + float3(1.0, 1.0, 1.0))/2.0;
  ret.color.rgb = normal;

  return ret;

  float3 PO;
  PO = pdi.vertex - teapotCenter;
  float radius = sqrt(dot(PO, PO));
  if (radius > 40)
	ret.color.rgb = float3(1.0, 0.0, 0.0);
  else if (radius > 30)
	ret.color.rgb = float3(0.0, 1.0, 0.0);
  else if (radius > 20)
	ret.color.rgb = float3(0.0, 0.0, 1.0);
  else if (radius > 10)
	ret.color.rgb = float3(1.0, 1.0, 0.0);
  ret.color.a = 1.0;

  return ret;
  
}


